# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.configure("2") do |config|

  # WARNING: if you are going to run a 64 bit guest inside a 32 bit host
  # you must enable hardware virtualization from your BIOS
  config.vm.box = "precise32"
  config.vm.box_url = "http://files.vagrantup.com/precise32.box"

  # Will appear on most shells as: vagrant@hostname depending on the PS1 line.
  # Good way to determine in which machine you are.
  config.vm.hostname = hostname

  ##provision

    ##shell

      # Run shell script as root. If you want to run as the vagrant user, use `privileged: false`.

      # Remember from your shell lessons that doint `sudo su user` does not work inside a script:
      # http://stackoverflow.com/questions/16768777/can-i-switch-user-in-vagrant-bootstrap-shell-script

      # Multiple methods can be specified. All are run.

        config.vm.provision :shell, :inline => "date > /tmp/provision0"
        config.vm.provision :shell, :inline => "date > /tmp/provision1"
        config.vm.provision :shell, :inline => <<EOF
          date > /tmp/provision_multiline
EOF

      # From script;

        #config.vm.provision :shell, :path => 'script.sh'

      # We recommend that you start your script with `set -v`, which will print the commands before executing them,
      # so you can understand what is being installed at each point.

  ##cores ##memory

    # Provider dependant options.

      name = 'vagrant_test'
      memory = '512'
      # WARNING: if you use more than one CPU on the guest
      # you must enable hardware virtualization from your BIOS
      cpus = '1'

      config.vm.provider "virtualbox" do |v|
        v.customize [
          'modifyvm', :id,
          # Appears on the virtualbox GUI. Can be changed anytime.
          '--name', name,
          '--memory', memory,
          '--cpus', cpus
        ]
        if cpus.to_i > 1
          v.customize ["modifyvm", :id, "--ioapic", "on"]
        end
      end

      #config.vm.provider :vmware_fusion do |v, override|
        #override.vm.box_url = "http://files.vagrantup.com/precise64_vmware.box"
        #v.vmx["memsize"] = memory
        #v.vmx["numvcpus"] = cpus
        #if cpus.to_i > 1
          #v.customize ["modifyvm", :id, "--ioapic", "on"]
        #end
      #end

  ##bindfs plugin

    #config.vm.provision :shell, :inline => <<EOF
      #mkdir /bindfs
#EOF
   #config.bindfs.bind_folder "/nfs", "/bindfs", :owner => "1111", :group => "1111", :'create-as-user' => true, :perms => "u=rwx:g=rwx:o=rwx", :'create-with-perms' => "u=rwx:g=rwx:o=rwx", :'chown-ignore' => true, :'chgrp-ignore' => true, :'chmod-ignore' => true

    # Use NFS because it is faster, but also change permissions which NFS does not normally allow.

    # Must have a hostonly network address for this to work.
    #config.vm.network :hostonly, "192.168.50.4"

    # Disable default mapping from . to /vagrant:
    #config.vm.synced_folder ".", "/vagrant", :disabled => true

    # Create a fast NFS share directory
    #config.vm.synced_folder ".", "/nfs", :nfs => true

   # All Vagrant configuration is done here. The most common configuration

  # -- ORIGINAL TEMPLATE ----------------------------------------------------

  # options are documented and commented below. For a complete reference,
  # please see the online documentation at vagrantup.com.

  # Every Vagrant virtual environment requires a box to build off of.
  #config.vm.box = "base"

  # The url from where the 'config.vm.box' box will be fetched if it
  # doesn't already exist on the user's system.
  # config.vm.box_url = "http://domain.com/path/to/above.box"

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network :forwarded_port, guest: 80, host: 8080

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network :private_network, ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network :public_network

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  #config.vm.synced_folder "shared_home", "/home"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider :virtualbox do |vb|
  #   # Don't boot with headless mode
  #   vb.gui = true
  #
  #   # Use VBoxManage to customize the VM. For example to change memory:
  #   vb.customize ["modifyvm", :id, "--memory", "1024"]
  # end
  #
  # View the documentation for the provider you're using for more
  # information on available options.

  # Enable provisioning with Puppet stand alone.  Puppet manifests
  # are contained in a directory path relative to this Vagrantfile.
  # You will need to create the manifests directory and a manifest in
  # the file base.pp in the manifests_path directory.
  #
  # An example Puppet manifest to provision the message of the day:
  #
  # # group { "puppet":
  # #   ensure => "present",
  # # }
  # #
  # # File { owner => 0, group => 0, mode => 0644 }
  # #
  # # file { '/etc/motd':
  # #   content => "Welcome to your Vagrant-built virtual machine!
  # #               Managed by Puppet.\n"
  # # }
  #
  # config.vm.provision :puppet do |puppet|
  #   puppet.manifests_path = "manifests"
  #   puppet.manifest_file  = "init.pp"
  # end

  # Enable provisioning with chef solo, specifying a cookbooks path, roles
  # path, and data_bags path (all relative to this Vagrantfile), and adding
  # some recipes and/or roles.
  #
  # config.vm.provision :chef_solo do |chef|
  #   chef.cookbooks_path = "../my-recipes/cookbooks"
  #   chef.roles_path = "../my-recipes/roles"
  #   chef.data_bags_path = "../my-recipes/data_bags"
  #   chef.add_recipe "mysql"
  #   chef.add_role "web"
  #
  #   # You may also specify custom JSON attributes:
  #   chef.json = { :mysql_password => "foo" }
  # end

  # Enable provisioning with chef server, specifying the chef server URL,
  # and the path to the validation key (relative to this Vagrantfile).
  #
  # The Opscode Platform uses HTTPS. Substitute your organization for
  # ORGNAME in the URL and validation key.
  #
  # If you have your own Chef Server, use the appropriate URL, which may be
  # HTTP instead of HTTPS depending on your configuration. Also change the
  # validation key to validation.pem.
  #
  # config.vm.provision :chef_client do |chef|
  #   chef.chef_server_url = "https://api.opscode.com/organizations/ORGNAME"
  #   chef.validation_key_path = "ORGNAME-validator.pem"
  # end
  #
  # If you're using the Opscode platform, your validator client is
  # ORGNAME-validator, replacing ORGNAME with your organization name.
  #
  # If you have your own Chef Server, the default validation client name is
  # chef-validator, unless you changed the configuration.
  #
  #   chef.validation_client_name = "ORGNAME-validator"
end

# Multiple config blocks are all run.
Vagrant.configure("2") do |config|
  config.vm.provision :shell, :inline => "date > /tmp/second_block"
end
